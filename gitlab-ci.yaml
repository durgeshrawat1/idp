stages:
  - build
  - upload
  - build_ui
  - upload_ui
  - deploy_appsync
  - validate
  - plan
  - apply

variables:
  AWS_DEFAULT_REGION: "us-east-1"
  WEBUI_BUILD_DIR: "src/webui/build"

before_script:
  - apk add --no-cache zip python3 py3-pip nodejs npm
  - pip3 install awscli
  - export AWS_ROLE_ARN=$CICD_GITLAB_RUNNER_IAM_ROLE
  - export AWS_WEB_IDENTITY_TOKEN_FILE=$CI_JOB_JWT_FILE

build_lambdas:
  stage: build
  script:
    - cd src/lambda
    - for d in */ ; do cd "$d" && zip -r9 "../../${d%/}.zip" . && cd .. ; done
    - cd ../..
  artifacts:
    paths:
      - src/lambda/*.zip

upload_lambdas:
  stage: upload
  script:
    - aws s3 mb s3://$LAMBDA_ARTIFACTS_BUCKET || true
    - for f in src/lambda/*.zip; do aws s3 cp "$f" s3://$LAMBDA_ARTIFACTS_BUCKET/ ; done

build_ui:
  stage: build_ui
  script:
    - cd src/webui
    - npm install
    - npm run build
    - cd ../..
  artifacts:
    paths:
      - $WEBUI_BUILD_DIR

upload_ui:
  stage: upload_ui
  script:
    - aws s3 mb s3://$WEBUI_BUCKET || true
    - aws s3 sync $WEBUI_BUILD_DIR s3://$WEBUI_BUCKET/

# AppSync schema and resolver deployment (example using AWS CLI)
deploy_appsync:
  stage: deploy_appsync
  script:
    - |
      # Replace these with your actual AppSync API ID and region
      export APPSYNC_API_ID=$APPSYNC_API_ID
      export AWS_REGION=$AWS_DEFAULT_REGION
      # Deploy schema
      aws appsync start-schema-creation --api-id $APPSYNC_API_ID --definition fileb://template/schema.graphql --region $AWS_REGION
      # Deploy resolvers (example for VTL, adjust as needed)
      for resolver in template/resolvers/*.vtl; do
        [ -e "$resolver" ] || continue
        # You must provide mapping for type/field names
        TYPE_NAME=$(basename "$resolver" | cut -d'.' -f1)
        FIELD_NAME=$(basename "$resolver" | cut -d'.' -f2)
        aws appsync create-resolver --api-id $APPSYNC_API_ID --type-name $TYPE_NAME --field-name $FIELD_NAME --request-mapping-template fileb://$resolver --response-mapping-template fileb://$resolver --data-source-name <YOUR_DATA_SOURCE_NAME> --region $AWS_REGION || true
      done

validate:
  stage: validate
  script:
    - terraform init
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -var-file=env/common.tfvars

apply:
  stage: apply
  script:
    - terraform apply -auto-approve -var-file=env/common.tfvars
  when: manual 